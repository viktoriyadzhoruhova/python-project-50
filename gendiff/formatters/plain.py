def format_plain(diff, path=''):
    """
    Formats the difference tree in plain text format.

    Parameters:
    diff (dict): The difference tree generated by find_diff.
    path (str): The current property path being traversed.

    Returns:
    str: The formatted difference as a plain text string.
    """
    lines = plain_formatter(diff, path)
    return "\n".join(lines)


def plain_formatter(diff, path=""):
    """
    Recursively processes the difference tree
    to create a list of formatted lines.

    Parameters:
    diff (dict): The difference tree generated by find_diff.
    path (str): The current property path being traversed.

    Returns:
    list: A list of formatted difference lines.
    """
    lines = []

    def add_line(status, value, full_key):
        actions = {
            "nested": lambda value, full_key: lines.extend(
                plain_formatter(value, full_key)
            ),
            "added": lambda value, full_key: lines.append(
                format_added_property(value, full_key)
            ),
            "removed": lambda value, full_key: lines.append(
                f"Property '{full_key}' was removed"
            ),
            "changed": lambda value, full_key: lines.append(
                format_changed_property(value, full_key)
            ),
            "unchanged": lambda value, full_key: None
        }
        action = actions.get(status)
        if action:
            action(value, full_key)

    for key, (status, value) in diff.items():
        full_key = create_full_key(path, key)
        add_line(status, value, full_key)

    return lines


def create_full_key(path, key):
    """
    Creates the full property path for the given key.

    Parameters:
    path (str): The current property path.
    key (str): The key to append.

    Returns:
    str: The full property path.
    """
    return f"{path}.{key}" if path else key


def format_value(value):
    """
    Formats a value for plain text output.

    Parameters:
    value (any): The value to be formatted.

    Returns:
    str: The formatted value.
    """
    if isinstance(value, dict):
        return "[complex value]"
    if isinstance(value, str):
        return f"'{value}'"
    if value is None:
        return "null"
    return str(value).lower()


def format_added_property(value, full_key):
    """
    Formats a line for an added property.

    Parameters:
    value (any): The value of the added property.
    full_key (str): The full key path for the added property.

    Returns:
    str: The formatted added property line.
    """
    value_description = format_value(value)
    return f"Property '{full_key}' was added with value: {value_description}"


def format_changed_property(value, full_key):
    """
    Formats a line for a changed property.

    Parameters:
    value (tuple): A tuple with old and new values of the changed property.
    full_key (str): The full key path for the changed property.

    Returns:
    str: The formatted changed property line.
    """
    old_value, new_value = value
    old_value = format_value(old_value)
    new_value = format_value(new_value)
    return f"Property '{full_key}' was updated. From {old_value} to {new_value}"
